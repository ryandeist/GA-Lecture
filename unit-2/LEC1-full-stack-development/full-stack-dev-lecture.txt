Client Software sends requests. Usually visible to the user. Front End stacks like JS, HTML, CSS. 

Server Software handles and responds to those requests. When it comes to sderver we focus on the roles played be the software. These use back end tools like Python, Node.JS, Java, and databases like SQL, MySQL, PostgresSQL. 

Why does this matter? As a full stack dev, you will be working with both. Handleing both the code on the front and back end. Understanding where the errors or bugs are between front and back end, as well as architecture. 

    ##Building Blocks: 
        - Front End - The part that users interact with like filling out a form or clicking. To build the front end. HTML, CSS, and JS. 
            Tools to help - React, Vue, Angular.

         - Back End - Apply business logic, pull data from databases. Ensures security for data and transactions. 
            Python, JS, Ruby and Java.
            Tools to help - Express and Flask. 

        - Databases: 

            - Where we store data for use in our application. Will catalog, search and retrieve these values. Popular ones MySQL, PostgreSQL, Oracle, MongoDB. 

            - Relational:
                Good for banking, or high volumes of transactions. 
            
            - Non-Relational:  
                Go to option for storing large amounts un related data, or complex relationships. 

    ##How to they work together:

            Client -> Server -> Database
            Database -> Server -> Client

    ##Frameworks and Libraries

        Both allow for a developer to use prewritten code to help complete a task. 

        - A frameworks provides the structure for an application complete with riles and conventions. 

        - Libraries off specifics functionality that developers can integrate into their applications that handle specific tasks. 

        These are both useful because they help simplifying tasks, offering tested solutions, providing community support. 

        There are two main types of frameworks, opiniated and unopinionated. 

            - Opinionated: They perfer conventions over customization. There a lot of defaults already, and less decisions to make. Can make people work easier together. They also provide some rules to follow.

            - Unopinionated: For flexibility. Lots of options and customization. Allows the developer to choose their own solutions. Theyre more lightweight. More prone to bugs. 

    ##Common Stacks in Modern Web Development. 
        ###What is a stack?
            - Combinations of languages, libraries, frameworks and databases used to build an application. 

        ###Common Stacks.
            - MEN, MongoDB, Express.js, Node.js
                * Offers high scalable, friendly to JS developers. 

            - MERN - Adds React to the MEN stack

            - Python, Django, PostgreSQL.
    
