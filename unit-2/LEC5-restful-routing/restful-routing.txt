#Restful Routing 

##Concepts:
    ###What is REST? 
        Rest, for for REpresentational State Transfer is a guiding architectural style for web applications, focusing on the client-server relationship. It's a set of principles that simplifies how web resources are defined and addressed. 

        ####Breaking Down REST
            #####Resources and Representations:
                At the hear of REST is the concept of a --resource--. In the context of a web environment, everything - from database data, HTML files, images, to videos - is considered a resource. You've encounters --URLS-- which are esstentially the addresses of where resources are located. 

                The "Representational" aspect of REST is about how these resources are presented to a clent (like a browser). When a client requests a resource, the server responds with a --representation-- of it. This representation is not the resource itself, but a portryal of its --current state--, often in formats like JSON or XML.

            #####State Transfer:
                The "State Transfer" part of REST revolves around how the client and server communicate or exchange the state of resources. For instance, if you're interacting with a blog, retrieving all posts involves receiving their current state from the server. Conversely, adding a new post means sending its details to the server, which updates the blogs data.

            #####REST's Universality:
                What makes REST versatile is its independence from any specific programming language or framework. It's not about the resources themselves but how their states are represented and transferred in a web environment.

                Systems adhering to REST principles are know as REST-compliant or --RESTful--. This architectural style underpins much of the internet's design, offering a standardized approach to structuring and handling web resources.

    ###RESTful Routing
        RESTful routing is applying REST architecture to routing.

        In REST, there is a clear separation between client and server. The client sends requests to retrieve or modify resources, and the server sends responses to those requests. 

        In order to facilitate this, RESTful routes map HTTP verbs (get, post, put, and delete) to CRUD counterparts. 
            POST -> CREATE -> Adding a resource
            GET -> READ -> Viewing a resource
            PUT -> UPDATED -> Changing a resource
            DELETE -> DELETE -> Removing a resource.

    ###Why use RESTful routing conventions?:
        REST is a convention that makes your application more predictable - it's a well understood architecture that other developers can easily adapt to and interpret. REST is also designed around server-client separation, which helps with both scalability and flexibility as the client and server can be changed and expanded separately. 

        As mentioned above, REST is also language agnostic - even as lanbguages and frameworks change, the communication between client and server stays the same. 

##RESTful Routing Conventions
    ###RESTful Routing Conventions
        RESTful routing is a set of best practices for organizing the interactions between client and server. Understanding the purpose and function of each route in a RESTful architecture is important for designing and building scalable and maintainable web applications. 

        Example: Breaking down the RESTful routing chart for a "blogs" resource to help you better understand each route and its purpose. 

| HTTP Method (Verb) | Path/Endpoint/URI     | CRUD Operation            | Route Name | Has Data Payload? | Purpose                                                                                            | Render/Redirect Action        |
| ------------------ | --------------------- | ------------------------- | ---------- | ----------------- | -------------------------------------------------------------------------------------------------- | ----------------------------- |
| GET                | `/blogs`              | Read all _blogs_          | index      | No                | Renders a view that shows all blogs                                                                | `res.render('blogs/index')`   |
| GET                | `/blogs/:blogId`      | Read a specific _blog_    | show       | No                | Renders a view that shows a specific blog                                                          | `res.render('blogs/show')`    |
| GET                | `/blogs/new`          | None                      | new        | No                | Renders a view including a form the user can fill out and submit to add a new blog                 | `res.render('blogs/new')`     |
| GET                | `/blogs/:blogId/edit` | See note below*           | edit       | No                | Renders a view including a filled out form the user can edit and submit to update a specific blog  | `res.render('blogs/edit')`    |
| POST               | `/blogs`              | Create a new _blog_       | create     | Yes               | Handles the user submitting a form to create a new blog                                            | `res.redirect('/you-choose')` |
| PUT                | `/blogs/:blogId`      | Update a specific _blog_  | update     | Yes               | Handles the user submitting a form to update a specific blog                                       | `res.redirect('/you-choose')` |
| DELETE             | `/blogs/:blogId`      | Delete a specific _blog_  | delete     | No                | Handles the user request to delete a specific blog                                                 | `res.redirect('/you-choose')` |

*NOTE: The `edit` route may optionally read data for a specific blog to pre-fill data in the form that will ultimately be rendered to the user.

    ###Creating RESTful routing charts 
        As a new web developer. understanding RESTful routing is key to building organized web applications.

        Here's why:
            - *Organizing your routes*: This chart will be your roadmap for organizing standard HTTP methods and their corresponding CRUD operations. It's like having a cheat sheet that clearly shows you which route does what in a restful API. 
            - *Planning your projects*: Before you dive into coding your next big project, this chart will help you lay out all the routes that you need. It's a bit like planning chapters in a book - you'll know what each part should do, making your time coding more efficient and more organized. 
            - *Create useful documentation*: Imagine you're creating documentation for your application. This routing chart can be a part of that - providing clear and concise instructions on how others can use your applications back end routes.
            - *Working in teams*: When working on group projects, it's important that everyone speaks the 'route' language. This chart ensures that all team members understand and agree on what each route in you application should do, avoiding confusion and mismatches in your project. 

| HTTP Method (Verb) | Path/Endpoint/URI     | CRUD Operation            | Route Name | Has Data Payload? | Purpose                                                                                            | Render/Redirect Action        |
| ------------------ | --------------------- | ------------------------- | ---------- | ----------------- | -------------------------------------------------------------------------------------------------- | ----------------------------- |
| GET                | `/puppies`              | Read all _blogs_          | index      | No                | Renders a view that shows all puppies                                                                | `res.render('puppies/index')` |
| GET                | `/puppies/:puppyId`      | Read a specific _blog_    | show       | No                | Renders a view that shows a specific puppy                                                          | `res.render('puppy/show')`    |
| GET                | `/puppies/new`          | None                      | new        | No                | Renders a view including a form the user can fill out and submit to add a new blog                 | `res.render('puppy/new')`     |
| GET                | `/puppies/:puppyId/edit` | See note below*           | edit       | No                | Renders a view including a filled out form the user can edit and submit to update a specific blog  | `res.render('puppy/edit')`    |
| POST               | `/puppies`              | Create a new _blog_       | create     | Yes               | Handles the user submitting a form to create a new blog                                            | `res.redirect('/you-choose')` |
| PUT                | `/puppies/:puppyIdId`      | Update a specific _blog_  | update     | Yes               | Handles the user submitting a form to update a specific blog                                       | `res.redirect('/you-choose')` |
| DELETE             | `/puppies/:puppyId`      | Delete a specific _blog_  | delete     | No                | Handles the user request to delete a specific blog                                                 | `res.redirect('/you-choose')` |

*NOTE: The `edit` route may optionally read data for a specific blog to pre-fill data in the form that will ultimately be rendered to the user.

##Routing for Embedded Resources 
    ###Routing for Embedded Resources (One:Many Relationships)
        Below is a table demonstrating the typical RESTful routing that you may experience when working with embedded resources"
        | HTTP Method (Verb) | Path/Endpoint/URI                       | CRUD Operation                   | Route Name    | Has Data Payload? | Purpose                                                                                                          | Render/Redirect Action               |
| ------------------ | --------------------------------------- | -------------------------------- | ------------- | ----------------- | ---------------------------------------------------------------------------------------------------------------- | ------------------------------------ |
| GET                | /blogs/:blogId/comments                 | Read all _comments_ for a _blog_ | indexComments | No                | Render a view that shows all the comments on a blog                                                              | `res.render('blogs/comments/index')` |
| GET                | /blogs/:blogId/comments/:commentId      | Read one _comment_ for a _blog_  | showComment   | No                | Render a view that shows a specific comment on a blog                                                            | `res.render('blogs/comments/show')`  |
| GET                | /blogs/:blogId/comments/new             | None                             | newComment    | No                | Render a view including a form the user can fill out and submit to add a new comment on a blog                   | `res.render('blogs/comments/new')`   |
| GET                | /blogs/:blogId/comments/:commentId/edit | See note below*                  | editComment   | No                | Render a view including a filled out form the user can edit and submit to update a specific comment on a blog    | `res.render('blogs/comments/edit')`  |
| POST               | /blogs/:blogId/comments                 | Create a _comment_ for a _blog_  | createComment | Yes               | Handles the user submitting a form to create a new comment on a specific blog                                    | `res.redirect('/you-choose')`        |
| PUT                | /blogs/:blogId/comments/:commentId      | Update specified _comment_       | updateComment | Yes               | Handles the user submitting a form to update a specific comment on a blog                                        | `res.redirect('/you-choose')`        |
| DELETE             | /blogs/:blogId/comments/:commentId      | Delete specified _comment_       | deleteComment | No                | Handles the user request to delete a specific comment on a blog                                                  | `res.redirect('/you-choose')`        |

*NOTE: The `edit` route may optionally read data for a specific blog to pre-fill data in the form that will ultimately be rendered to the user.

##Routing for referenced resources
    ###Routing for Referenced resources (ONe: Many and Many:Many Relationships)
        Below is a table demonstrating typical RESTful routing that you may experience when working with Reference Resources
            > You may want to associate a blog with a subscriber. This would modify the `Subscriber` resource instead of the `Blog` resource. If this is the case, reverse the path above so that it begins with `/subscribers/:subscriberId/blogs
            > If a route is marked as having a data payload, its means there is data that will be sent from the client to the server with the requests.

| HTTP Method (Verb) | Path/Endpoint/URI                        | CRUD Operation                          | Route Name    | Has Data Payload? | Purpose                                                                                                                         | Render/Redirect Action        |
| ------------------ | ---------------------------------------- | --------------------------------------- | ------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------- | ----------------------------- |
| POST               | /blogs/:blogId/subscribers/:subscriberId | Associate a _blog_ with a _subscriber_  | unpredictable | No                | Handles the user request to associate a subscriber to a blog                                                                    | `res.redirect('/you-choose')` |
| POST               | /blogs/:blogId/subscribers               | Associate a _blog_ with a _subscriber_  | unpredictable | Yes               | Handles the user request to associate a subscriber to a blog. The id of subscriber included in payload instead of the endpoint. | `res.redirect('/you-choose')` |


        It's important to note that many applications can implement full CRUD on embedded resources without using all of the above routes. Often, embedded resources will be shown alongside their parent resources. For example, the comments on a blog might be shown on the blog show page, so there wouldn't be a need for a comment index view. Comments might not have an individual show view, so there might not be a need for a comment show page. The for to create a new comment might not need a deidicated view, so there may not be a new comment view. Your implementation will depend on your vision for your application. 