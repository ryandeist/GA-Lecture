Intro to Javascript

Setting up your development environment:
    1. within the terminal, cd into your appropriate directory
    2. create new directory for application, cd into this directory
    3. create an app.js and index.html file
    4. open code editor 
    5. Within the HTML file, add boilerplate by typing ! and tab.
    6. Connect our app.js file by adding the below line inside the <head> tracking
        <script defer src="./app.js"></script>
    7. Open the HTML file in a browser, or activate the app.js file directly with the below line (in the termial);
        node app.js

What is Javascript?

    Javascript (JS) is a versitile and powerful coding language. Created to enchance web pages and make them interactive. 
    It is the only programming language used directly within a browser, which has made it popular for creating web-based applications
    It is also used heavily in server, desktop and mobile applications. 

Why use JavaScript?

    - it is a necessary dev tool, but also extremely versitile
    - system and environment agnostic. Does not need a lot of resources to run 
    - under active development. Still adding new fixes and features annually
    - vast community around it. 
    - highly employable skill 

Javascript's role in web applications:
    Javascript, along with HTML and CSS, create the three essential technologies used to create web apps. 
    HTML - Defines structure and content
    CSS - style and presentation
    JavaScript - interactivity and behavior 

Comments
    Comments are pieces of text that are ignore when the program is evaluated.
    There are several reasons why comments are valuable.: 
        - Help ourselves and others retroatively understand our code. 
        - Help us document whu a decision was made, or the purpose of this code.
        - Document codes functionality, aiding with debugging and troubleshooting
    
    There are two type of comments:
        Single-line comments:
            - denoted by //
            - // This is a single line comment.
            - can be on their own line or the same line as active code.
            - can automatically comment a line in or out w/ Command + / OR Ctrl + /

        Multi-Line Comments: 
            - denoted by a /* and ends with */

Printing to the console:
    Can print our program outputs to the terminal or console in the browser.
    To print to the console in JavaScript we can use console.log() ie:
        console.log('Hello World'); // Prints Hello World to the console
    
    Printing to the console is a powerful tool in debugging and trying out code. 

Variables:

    The purpose of a variable in programming is to hold reference data.
        A VARIABLE is a named container used to store and retrieve data used within a program. 
        We use let or const to declare a variable in JavaScript. 
        A DECLARATION is used to indicate a variable is being created. An IDENTIFIER is then used to identify a variable.
            ie: let favSnack; // let is the declaration, favSnack is the identifier
        An ASSIGNMENT operator (=) is used to assign a value to the declared variable
            ie: favSnack = 'Cookie'; // = is used to assign the value Cookie to the variable favSnack
        Declaring, Identifying, and Assigning in the same line is called INITIALIZING
            ie: let favSnack = 'Cookie';

    Naming Rules:
        In Javascript, the identifier naming convention will follow camelCase.
        Identifiers - 
            - Are case sensitive
            - cannot begin with a number
            - can contain letters, digits, underscores, and dollar signs
            - cannot contain spaces
            - cannot be reserved keywords or words
        
    let and const:
        let 
            - good for variables that you expect to change throughout a program.
            - can be reassigned ie:
                let favSnack = 'Cookies'; // INITIALIZES the variable favSnack and ASSIGNS a value of Cookie.
                favSnack = 'Chips'; // will RE-ASSIGN the favSnack variable to 'Chips'
        const 
            - good variables that you do not expect or do not want to change. 
            - Good for things like names, places, dates, etc.
            - cannot be reassigned ie:
                const favSnack = 'Cookies'; // INITIALIZES the variable favSnack and ASSIGNS a value of Cookie.
                favSnack = 'Chips'; // will cause an error "TypeError: Assignment to constant variable.

Primitive Data Types
    Primitive data types are data types that are stored directly in memory. 
    JavaScript has 7 primitive datatypes, five of which are common. (two uncommon):
        String:
            A string represent textual data with zero or more characters. They are denoted by being wrapping in "" '' or ``. ie:
                let myString = "Hello!"; // basic string wrapped in quotes
                let mySecondString = 'I said "Hello!"'; // if I need to use quotes in my string, I can wrap in single quotes
                let myThirdString = `I'd like for you to say "Hello!"`; // If I need to use both quotes and single quotes in my string, I can use backticks (``)
            You can have an empty string by creating a string with no characters in it. 
            Another way to include quotes or single quotes in your string, you can use \ ahead of a character to ESCAPE that character, preventing it from being executed. ie
                let myFourthString = 'He\'d better say Hello!'; // The backslash will keep Javascript from thinking the ' is part of a new string.  

        Number:
            A number represents a numeric value. 
            In Javascript, there is no distinction between an integer and decimal numbers. 
            Numbers do not use symbols to assign. ie:
            let myNum = 5; // INITIALIZES the myNum VARIABLE with a value of 5.

        Boolean:
            Only has two possible values. True or false 
            Useful for their simplicity, especiall when making decisions based on data. 

        Undefined:
            A variable that has not been assigned a value is undefined. ie
                let myVariable; // Declared and Identified a variable, but did not assign a value.
                console.log(myVariable); // will return undefined.

        Null:
            Null has just one value, null. null is the value of a variable that explicitly has no value, representing a deliberate lack of value.

    Uncommon Primitive Data Types:
        There are two uncommon primitive data types. You are unlikely to encounter them in most circumstance. 
            Symbol 
            BigInt 

Template Literals
    Combining Strings.
        -We use string interpolation with template literals to combine strings with one another.
        -Templates literals are a string that use backticks (``). Ex:
            let username = 'friend';
            let greeting = `Hello, ${username}.'; // ${} is used to add a variable to our string.
            console.log(greeting); // Prints Hello, friend.
        -Anything that resolves to a single expression (value) can be used in the ${}.
        -Template literals can span multiple lines. 

History of Javascript
    - Created by Netscape during the browser wars in the 1990s to compete with MS Internet Explorer
    - The goal of Javascript was to make websites more dynamic/interactive
    - In 1995, Netscape tasked Brendan Eich to creating programming language to run inside their browser. He created the first interation in
    ten days to make the launch Navigator 2.0. Named it JavaScript as a marketing ploy to associate itself with Java. 
    - In '97, Netscape contacted the ECMA to assist in standardizing Javascript. As a result, Javascript will work in any browser. 
    - By mid-2000s, many large companies adopted Javascript- most notably Google for Maps and Gmail
    - Today, JS is one of the most popular and in-demand programming languages, along with HTML and CSS
    - Javascript is updated annually.

Dynamic vs. Static Typed languages
    - Dynamically-typed languages such as JavaScript, Python and Ruby allow variables to be assigned different types of data during runtime (execution).
        ie: 
        // Declare a variable named data and intialize with a number
        let data = 123;
        // Reassigning a different type of data is allowed.
    - Static-typed languages such as Java and C++ require a variables type to be declared and cannot be changed
        ie: 
        // Delcare a variable as an integer and initialize it with integer
        int data =123;
        // Assigning anything other than an integer raises an error.
        data = "Hello";
        // NOT ALLOWED 

Weakly vs. Strongly Typed languages
    - Weakly tpyed languages such a JavaScript allow implicit conversions between types which can lead to interesting results
        ie. 
        const num = 7;
        const sentence = 'A week is ${num} days.';
        console.log(sentence);
        // Prints: A week is 7 days.
    - The above example shows that JS will automatically convert the number 7 into a string to concatenate with the rest of the sentence. 
    - The same code in a STRONGLEY-TYPED language would not function.
        ie. (example in Python)
        num = 7;
        sentence = 'A week is ${num} days.';
        # Error! A string and an int cannot be concatenated
    - To make this code valid, num must be EXPLICITLY converted to a string. 
        ie. (Example in Python)
        num = 7;
        sentence = "A week is " + str(num) + " days."
        # This works!
        print(sentence)
        # Prints: A week is 7 days.
    -There is a newer language called TypeScript you might hear about - this language is a superset of JavaScript 
    and adds static and strong typing to JavaScript. Many developers agree that these type-safety 
    features make code less error-prone and are worth the extra effort to code.
    
Implicit and Explicit Type Conversion 
    Type Conversion:
        JavaScript is relaxed when it comes to datatypes contrary to non-dynamic types, a variable can change its type.
            ie:
            let num = 15; // Variable num is a number
            num = 'Hey'; // Variable num is now a string.

    Beware of Implicit Conversion
        Implicit Type Conversion - the process of automatically converting one data type to another.
        JavaScript can perform implicit type conversion in situations like performing arithmetic operation on values of different types.
        Being aware of these behaviors is import to avoid a backfire.
        ie: 
        13 == '13'; // using the equality comparision operator, this evaluates to true because it will perform type-conversion 
        13 === '13'; // using the strict equality comparision operator, it will not perform type conversion.

    Explicit Type Conversion
        Explicit Type Conversion - the process of manually converting one data type to another. Example methods below. 
            Convert to Strings: 
                - toString();
                    ie:
                    let numOne = 123.456;
                    let strOne = numOne.toString(); // Evaluates to "123.456"
                - String();
                    ie:
                    let numTwo = 123.456;
                    let strTwo = String(numTwo); Evaluates to "123.456"
                - toFixed(); // Note, we must specify the number of decimals we want in the parenthesis.
                    ie: 
                    let numThree = 123.456;
                    let strThree = numThree.toFixed(2); // "123.46"

            Convert to Numbers:
                - parseInt() // Rounds down to the nearest whole number
                    ie:
                    let strFour = '1234.567';
                    let numFour = parseInt(strFour); // Evaluates to 1234
                - parseFloat()
                    ie:
                    let strFive = '1234.567';
                    let numFive = parseFloat(strFive); // Evaluates to 1234.567
                - Number()
                    ie:
                    let strSix = '1234.567';
                    let numSix = Number(strSix); // Evaluates to 1234.567

    When to use Implicit vs Explicit
        Implicit can be convenient but can lead to unexpected results, which is why it is important to understand when it can happen.

        In general, its best to explicit type conversion when we need to be that a value is of a certain type. 
        For example, if we're writing a function that expects a number value as a parameter, we should use the Number() function to conver the value to a number before runnning it. 



