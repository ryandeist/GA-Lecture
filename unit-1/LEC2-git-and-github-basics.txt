Intro to Git and Github

Version Control:
        - A method that allows developers to keep track of file changes over time. 
        - Makes working with teams easier because it enables people to work on the same project without overriding each others changes.
    As developers, version control lets us:
        - Review changes made over time by whom
        - work with others
        - experiment without impacting main code base
        - return to older versions. Useful for troubleshooting bugs
        - work offline

Git Version Control:
    Git is the most popular version control system.
    Core Concepts of Git:
    Git repository (aka Git repo or repo)
        - essentially a copy of a project. Holds key details for every line of code, including:
            1. Who touched a specific piece of code.
            2. What they changed
            3. When the change happened
        - repos can be stored on a local machine or remote servers (like GitHub)
    Git branch
        - Used to test knew things. Helps developers working on the same project avoiding messing up each others code. We will primarily be working in the 'main' branch as our source of truth. 
        - 'main' is the default branch name on GitHub
    Git remote
        - a reference to a repo hosted on an external server, allowing for synchronization and collaboration between a local git repo and its counterpart.
        - in GitHub, remote typically come in the form of a URL pointing to a GitHub repo.

GitHub
    What is GitHub?: 
        Web-based platform used primarily for version control and collab coding. Can be used to backup repos and share repos with the world.
    Why use GitHub?: 
        It serves a cloud-based backup for code to safeguard against local machine failures. It is also essentially for collaborating with developers across different locations.
    Difference between Git and Github. 
        Git is a CLI tools great for tracking changes on our own computers, GitHub is an online tool that provides cloud-based storage for our code.

Checking Local Repo Status:
    command = git status - tells us what is happing with our local repo. ie: is the branch up to date? Are files ready to be committed? etc 

View remotes
    command = git remote -v - lists the remotes that have been configured for the local repo. When you clone a repo, the location you cloned it from is added as a remote call origin.
    You can choose which remote you'd like to use when you push/pull code to/from GitHub. For now, we will typically use origin. 

Understanding the Git flow

    The Git workflow is as follows
	1. Fork from public repo to personal repo
	2. Clone personal repo to terminal in location of your choosing (git clone -link-)
        1. Write code - writing new or overwriting existing code.
        2. Stage work - After writing code, we have to stage the changes.
            command = git add <file name> (we can use -A to stage all files we are working with)
        3. Commit staged work - provides a check point where you can save recent changes to your code and explain changes with a message.
            command = git commit -m "<message>"
        4. Push committed work - sends committed changes to remote repository. In our case, from local machine to Github 
            command = git push <remote name> <remote-branch-name>

Why is Git flow important
    - Encourages small incremental changes that are easier to manage, especially if something breaks.
    - Each commit should clearly explain why and how a change was done. 
    - Creates a back-up in case of file corruption or machine failures
    - reverts to prior states in the code is easier.